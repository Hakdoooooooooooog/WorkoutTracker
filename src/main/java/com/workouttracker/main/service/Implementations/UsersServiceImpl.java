package com.workouttracker.main.service.Implementations;

import java.util.List;
import java.util.UUID;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.workouttracker.main.dtos.UsersDto;
import com.workouttracker.main.entities.UsersEntity;
import com.workouttracker.main.mapper.UsersMapper;
import com.workouttracker.main.repositories.UsersRepository;
import com.workouttracker.main.service.Interfaces.UsersService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class UsersServiceImpl implements UsersService {
    private final UsersRepository usersRepository;
    private final UsersMapper usersMapper;
    private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    @Override
    public List<UsersDto> getAllUsers() {
        List<UsersDto> userDTOs = usersRepository.findAll()
                .stream()
                .map(usersMapper::toDto)
                .toList();

        if (userDTOs.isEmpty()) {
            log.warn("No users found");
            return List.of();
        }

        return userDTOs;
    }

    @Override
    public UsersDto getUserById(UUID userId) {
        return usersRepository.findById(userId)
                .map(usersMapper::toDto)
                .orElseThrow(() -> new RuntimeException("User not found"));

    }

    @Override
    public UsersEntity createUser(UsersEntity user) {
        // ID and timestamps will be auto-generated by JPA
        String hashedPassword = hashPassword(user.getPassword());
        user.setPassword(hashedPassword);
        return usersRepository.save(user);
    }

    @Override
    public UsersEntity updateUser(UUID userId, UsersEntity user) {
        return usersRepository.findById(userId)
                .map(existingUser -> {
                    usersMapper.updateEntityFromDto(user, existingUser);
                    // updatedAt will be auto-updated by @PreUpdate
                    log.info("User updated successfully");

                    return usersRepository.save(existingUser);
                })
                .orElseThrow(() -> new RuntimeException("User not found"));
    }

    @Override
    public void deleteUser(UUID userId) {
        UsersEntity user = usersRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        usersRepository.delete(user);
        log.info("User deleted successfully");
    }

    public boolean loginUser(String email, String password) {
        UsersEntity foundUser = usersRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found"));

        if (checkPassword(password, foundUser.getPassword())) {
            log.info("User logged in successfully");
            return true;
        }

        log.warn("Invalid password");
        return false;
    }

    private String hashPassword(String password) {
        return passwordEncoder.encode(password);
    }

    private boolean checkPassword(String plainPassword, String hashedPassword) {
        return passwordEncoder.matches(plainPassword, hashedPassword);
    }

    public void logoutUser(String email) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'logoutUser'");
    }

    public Object getUserByEmail(String email) {
        return usersRepository.findByEmail(email)
                .map(usersMapper::toDto)
                .orElseThrow(() -> new RuntimeException("User not found"));
    }

}
